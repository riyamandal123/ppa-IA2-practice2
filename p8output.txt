Breakpoint 1, main () at p8original.c:70
70  {
(gdb) n
71    int count = input_n();
(gdb) n
How many triangles will you enter:
2
72    Triangle tris[count];
(gdb) n
73    input_n_triangles(count, tris);
(gdb) n
Enter the base, altitude of a triangle:
3
4
Enter the base, altitude of a triangle:
4
5
74    find_areas(count, tris);
(gdb) s
find_areas (n=2, t=0x7ffc893ed0b0) at p8original.c:39
39    for (int i = 0; i < n; i++)
(gdb) n
41      find_area(&t[i]);
(gdb) n
39    for (int i = 0; i < n; i++)
(gdb) n
41      find_area(&t[i]);
(gdb) n
39    for (int i = 0; i < n; i++)
(gdb) n
43  }
(gdb) n
main () at p8original.c:75
75    Triangle small = find_smallest_triangle(count, tris);
(gdb) s
find_smallest_triangle (n=2, t=0x7ffc893ed0b0) at p8original.c:48
48    small = t[0];
(gdb) n
50    for (int i = 1; i < n; i++)
(gdb) n
52      if (small.area > t[i].area)
(gdb) n
50    for (int i = 1; i < n; i++)
(gdb) n
57    return small;
(gdb) n
58  }
(gdb) n
main () at p8original.c:76
76    output(count, tris, small);
(gdb) s
output (n=2, t=0x7ffc893ed0b0, smallest=...) at p8original.c:62
62    for (int i = 0; i < n - 1; i++)
(gdb) n
64      printf("%f, %f and\n", t[i].base, t[i].altitude);
(gdb) n
3.000000, 4.000000 and
62    for (int i = 0; i < n - 1; i++)
(gdb) n
66    printf("%f, %f\nis\ntriangle with base = %f and altitude = %f having area = %f\n", t[n-1].base, t[n-1].altitude, smallest.base, smallest.altitude, smallest.area);
(gdb) n
4.000000, 5.000000
is
triangle with base = 3.000000 and altitude = 4.000000 having area = 6.000000
67  }
(gdb) n
main () at p8original.c:77
77    return 0;
(gdb) n
78  }(gdb) 
